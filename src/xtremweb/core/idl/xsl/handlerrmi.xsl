<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.1">

<xsl:output method="text" />
<xsl:include href="lib.xsl"/>

<xsl:template match="/">    

<xsl:variable name="moduleName"
  select="/Module/@name" />
<xsl:message>Processing HandlerRMI for module <xsl:value-of select="$moduleName" /></xsl:message>

<xsl:variable name="filename"
  select="concat('src/xtremweb/core/com/handler/HandlerRMI',$moduleName,'.java')" />
<xsl:message>Creating <xsl:value-of select="$filename" /></xsl:message>
<xsl:document href="{$filename}" method="text">
package xtremweb.core.com.handler;

/**
 * HandlerRMI<xsl:value-of select="Module/@name" />.java
 *
 *  Handles RMI Communications from an RMI Client
 *
 * This code is generated with from TODO
 * the definition file used TODO
 *
 * Do not edit this file
 *
 * @author fedak
 * @version "1.0"
 */

import xtremweb.core.com.idl.*;
import xtremweb.core.iface.Interface<xsl:value-of select="$moduleName"/>;
import xtremweb.serv.<xsl:value-of select="$moduleName"/>.Callback<xsl:value-of select="$moduleName"/>;
import xtremweb.core.obj.<xsl:value-of select="Module/@name" />.*;
import java.rmi.*;
import java.rmi.server.UnicastRemoteObject;
<xsl:value-of select="Module/@import" />


public class HandlerRMI<xsl:value-of select="$moduleName"/> extends HandlerRMITemplate implements Interface<xsl:value-of select="$moduleName"/> {

    public HandlerRMI<xsl:value-of select="$moduleName"/> ()  throws RemoteException  { 
    }

  <xsl:for-each select="/Module/Method">
    <xsl:call-template name="java-method">
      <xsl:with-param name="moduleName" select="$moduleName" />
      <xsl:with-param name="methodName" select="." />
      <xsl:with-param name="params"
        select="./Param" />
      <xsl:with-param name="return"
        select="./Return" />
      <xsl:with-param name="exceptions" select="./Throws"/>
    </xsl:call-template>
  </xsl:for-each>
}
</xsl:document>
</xsl:template>


<!-- The main template for a Java Method -->
<xsl:template name="java-method">
<xsl:param name="moduleName" />
<xsl:param name="methodName" />
<xsl:param name="params" />
<xsl:param name="return" />
<xsl:param name="exceptions"/>
<!-- Builds the attributes --> 
     public <xsl:value-of select="concat($return/@type , ' ', $methodName/@name)"/>( <xsl:call-template name="params-to-list"><xsl:with-param name="params" select="$params"/></xsl:call-template> ) throws RemoteException<xsl:call-template name="exception-list"><xsl:with-param name="exceptions" select="$exceptions"/></xsl:call-template>  {
             try{
                 <xsl:if test="$return/@type!='void'">return (</xsl:if><xsl:value-of select="concat('((Interface', $moduleName, ') callback ).',$methodName/@name)"/>( <xsl:call-template name="params-to-untyped-list"><xsl:with-param name="params" select="$params"/></xsl:call-template> )<xsl:if test="$return/@type!='void'">)</xsl:if>;
    		}catch (Exception e){
    		     throw new RemoteException(" "+e);
    		}
    }
</xsl:template>



</xsl:stylesheet>
